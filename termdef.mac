;**********************************************************************;
;                                                                      ;
;   This file is part of TED, a clone of the screen-oriented text      ;
;   editor that was once available for the RT-11 OS.                   ;
;   Copyright (C) 2011-2020, Hector Peraza.                            ;
;                                                                      ;
;   Syntax highlighting added.                                         ;
;   Copyright (C) 2022, Lars Lindehaven.                               ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

	.Z80

	title	TED - Text Editor
	subttl	Terminal I/O routines

	include	TED.INC

;=======================================================================

;   T E R M I N A L   C O N T R O L   M O D U L E

;     (Link as first module)

	public	HOME,CLS,CLREOS,CLREOL,CSRUP,CSRDN
	public	CSRLFT,CSRRGT,PUTCUR,FWDIDX,REVIDX
	public	INSLIN,DELLIN,HASSRG,SCRLRG,TRMNAM
if HILI
	public	TNORMAL,TFAINT,TITALIC,TBOLD
endif

	extrn	PUTC

;--------------------------------------------------------------

	cseg

; Display patch area

	org	10h-3

vtname:		db	'ANSI',0
vtsize:		db	80,24			; width, height
vclscr:		db	6,ESC,'[H',ESC,'[J',0	; cursor home and clear screen
vcleos:		db	3,ESC,'[J',0		; clear to end of screen
vcleol:		db	3,ESC,'[K',0		; clear to end of line
vcurup:		db	3,ESC,'[A',0		; cursor up
vcurdn:		db	3,ESC,'[B',0		; cursor down
vcurrgt:	db	3,ESC,'[C',0		; cursor right
vcurlft:	db	3,ESC,'[D',0		; cursor left
vhome:		db	3,ESC,'[H',0		; cursor home
vcurprf:	db	2,ESC,'[',0		; cursor position prefix
vcursep:	db	1,';',0			; cursor position separator
vcurpst:	db	1,'H',0			; cursor position postfix
vcurbcd:	db	TRUE			; binary coded decimal?
vcuryof:	db	1			; row offset
vcurxof:	db	1			; col offset
vxfirst:	db	FALSE			; column first?
vfwdidx:	db	2,ESC,'D',0		; scroll window up
vrevidx:	db	2,ESC,'M',0		; scroll window down
vinsln:		db	0			; insert line
vdelln:		db	0			; delete line
vscrlrg:	db	1,'r',0			; current number (bcd)

if HILI
vnormal:	db	4,ESC,'[0m',0		; normal 
vbold:		db	4,ESC,'[1m',0		; bold
vfaint:		db	4,ESC,'[2m',0		; faint
vitalic:	db	4,ESC,'[3m',0		; italic
endif

	org	0B0h-3

;--------------------------------------------------------------

TRMNAM:	ld	hl,vtname
	ret

CLS:	push	hl
	ld	hl,vclscr
	jp	pseq

CLREOS:	push	hl
	ld	hl,vcleos
	jp	pseq

CLREOL:	push	hl
	ld	hl,vcleol
	jp	pseq


HOME:	push	hl
	ld	hl,vhome
	ld	a,(hl)
	or	a
	jp	nz,pseq
	ld	hl,0
	call	PUTCUR
	pop	hl
	ret

; H = x coord, L = y coord

PUTCUR:	push	hl
	push	de
	push	bc

	if	TRUE

	ex	de,hl
	ld	hl,(vcuryof)	; H = vcurxof, L = vcuryof
	add	hl,de		; should not generate any CY from L to H
	ex	de,hl

	else

	ld	a,(vcurxof)	; this is the same as above, but takes
	add	a,h		; more bytes
	ld	d,a
	ld	a,(vcuryof)
	add	a,l
	ld	e,a

	endif

	ld	a,(vxfirst)
	or	a
	jr	z,noswap
	ld	a,e
	ld	e,d
	ld	d,a
noswap:	ld	hl,vcurprf	; prefix
	call	putseq
	ld	c,e		; y coord
	call	pcurnum
	ld	hl,vcursep	; separator
	call	putseq
	ld	c,d		; x coord
	call	pcurnum
	ld	hl,vcurpst	; postfix
	call	putseq
	pop	bc
	pop	de
	pop	hl
	ret

; H = bottom line, L = top line

SCRLRG:	ld	a,(vscrlrg)
	or	a
	ret	z

	push	hl
	push	de
	push	bc

	if	FALSE

	ex	de,hl
	ld	hl,(vcuryof)	; H = vcurxof, L = vcuryof
	add	hl,de		; should not generate any CY from L to H
	ex	de,hl

	else

	ld	a,(vcurxof)	; this prevents carry from L to H
	add	a,h		; in case HL = -1 (reset region)
	ld	d,a
	ld	a,(vcuryof)
	add	a,l
	ld	e,a

	endif

	ld	a,(vxfirst)
	or	a
	jr	z,noswp
	ld	a,e
	ld	e,d
	ld	d,a
noswp:	ld	hl,vcurprf	; prefix
	call	putseq
	ld	c,e		; y coord
	call	pcurnum
	ld	hl,vcursep	; separator
	call	putseq
	ld	c,d		; x coord
	call	pcurnum
	ld	hl,vscrlrg	; postfix
	call	putseq
	pop	bc
	pop	de
	pop	hl
	ret

HASSRG:	ld	a,(vscrlrg)
	or	a		; return NZ if terminal supports scroll region
	ret

pcurnum:ld	a,(vcurbcd)
	or	a
	ld	a,c
	jp	z,PUTC
	; fall thru

; Display A as decimal number (up to 3 digits, no leading zeros)

adec:	push	de
	push	bc
	ld	d,0
	ld	b,100
	call	ad1
	ld	b,10
	call	ad1
	add	a,'0'
	call	PUTC
	pop	bc
	pop	de
	ret
ad1:	ld	c,'0'-1
ad2:	inc	c
	sub	b
	jr	nc,ad2
	add	a,b
	push	af
	ld	a,c
	cp	'0'
	jr	nz,ad4
	inc	d
	dec	d
	jr	z,ad5
ad4:	call	PUTC
	ld	d,1
ad5:	pop	af
	ret

CSRUP:	push	hl
	ld	hl,vcurup
	jr	pseq

CSRDN:	push	hl
	ld	hl,vcurdn
	jr	pseq

CSRLFT:	push	hl
	ld	hl,vcurlft
	jr	pseq

CSRRGT:	push	hl
	ld	hl,vcurrgt
	jr	pseq

FWDIDX:	push	hl
	ld	hl,vfwdidx
	jr	pseq

REVIDX:	push	hl
	ld	hl,vrevidx
	jr	pseq


INSLIN:	push	hl
	ld	hl,vinsln
	jr	putseq

DELLIN:	push	hl
	ld	hl,vdelln

pseq:	call	putseq
	pop	hl
	ret

putseq:	ld	a,(hl)
	or	a
	ret	z
	push	bc
	ld	b,a
	inc	hl
pseq1:	ld	a,(hl)
	call	PUTC
	inc	hl
	djnz	pseq1
	pop	bc
	ret

if HILI
TNORMAL:push	af
	push	bc
	push	de
	push	hl
	ld	hl,vnormal
	call	putseq
	pop	hl
	pop	de
	pop	bc
	pop	af
	ret


TFAINT:	push	af
	push	bc
	push	de
	push	hl
	ld	hl,vfaint
	call	putseq
	pop	hl
	pop	de
	pop	bc
	pop	af
	ret

TITALIC:push	af
	push	bc
	push	de
	push	hl
	ld	hl,vitalic
	call	putseq
	pop	hl
	pop	de
	pop	bc
	pop	af
	ret

TBOLD:	push	af
	push	bc
	push	de
	push	hl
	ld	hl,vbold
	call	putseq
	pop	hl
	pop	de
	pop	bc
	pop	af
	ret
endif

	end
