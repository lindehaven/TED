;**********************************************************************;
;                                                                      ;
;   This file is part of TED, a clone of the screen-oriented text      ;
;   editor that was once available for the RT-11 OS.                   ;
;   Copyright (C) 2011-2020, Hector Peraza.                            ;
;                                                                      ;
;   This file adds Zilog Z80 assembly syntax highlighting; ZED!        ;
;   Copyright (C) 2022-2023, Lars Lindehaven.                          ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

	.Z80

	title	ZED - Z80 Editor
	subttl	TED Syntax highlighting

	include	TED.INC

;=======================================================================

;   H I G H L I G H T I N G   M O D U L E

; Only assemble this file if HILI is TRUE in TED.INC
if	HILI

	public	HLPAR,HLVIEW,HLSTA
	extrn	TNORMAL,TFAINT,TITALIC,TBOLD,TNORMAL

;--------------------------------------------------------------

	dseg

; Definitions for highlighting of the Zilog Z80 assembly programming language.

; Key characters
HLCCO	equ	59		; ; begins comment
HLCDQ	equ	34		; " begins and ends double-quoted string
HLCSQ	equ	39		; ' begins and ends single-quoted string

; Keywords shall be written in lowercase if case insensitive.
HLCSKW	equ	20h		; 00h = case sensitive, 20h = case insensitive

; There is a keyword list for each keyword length to increase performance.
; Keywords are separated by SPC and each keyword list ends with SPC NUL.
HLCKW2:	db	'cp di ei ex im in jp jr ld or rl rr'
	db	' ',0
HLCKW3:	db	'adc add and bit ccf cpd cpi cpl daa dec exx inc ind ini ldd '
	db	'ldi neg nop out pop res ret rla rlc rld rra rrc rrd rst sbc '
	db	'scf set sla sra sll srl sub xor'
	db	' ',0
HLCKW4:	db	'call cpdr cpir djnz halt indr inir lddr ldir outd outi otdr '
	db	'otir push reti retn rlca rrca'
	db	' ',0
; Keyword lists for keywords of other lengths can be added here...

; States
HLSNC	equ	00h		; no change
HLSNO	equ	01h		; normal
HLSCO	equ	02h		; comment
HLSSQ	equ	04h		; single-quoted string
HLSDQ	equ	08h		; double-quoted string
HLSKW	equ	10h		; keyword

; State buffer
HLSTA:	ds	MAXLEN
	db	0


	cseg

HLPAR:
; Parse line segment and store highlighting states in HLSTA.
; Input:
;	hl = pointer to start of line segment
;	b = length of line segment
; Output:
;	Highlighting states in HLSTA.
; Clobbers:
;	None
;
	push	af		; \
	push	bc		; \\
	push	de		; \\\
	push	hl		; \\\\
	push	ix		; \\\\\
	push	iy		; \\\\\\
	call	HLSTAI		; initialize highlight states
	ld	ix,HLSTA	; pointer to highlighting segment
hlploop:
	ld	a,b		; line segment length
	or	a
	jp	z,hlpret	; return if end of line segment
	ld	a,(hl)		; get character from line buffer

hlpco:				; is it a comment?
	cp	HLCCO
	jr	nz,hlpsq	; no, check if single-quoted string
	ld	(ix),HLSCO	; mark beginning of comment
	ld	c,CR
	jr	hlpnext

hlpsq:				; is it a single-quoted string?
	cp	HLCSQ
	jr	nz,hlpdq	; no, check if double-quoted string
	ld	(ix),HLSSQ	; mark beginning of single-quoted string
	ld	c,HLCSQ
	jr	hlpnext

hlpdq:				; is it a double-quoted string?
	cp	HLCDQ
	jr	nz,hlpwo	; no, check if word
	ld	(ix),HLSDQ	; mark beginning of double-quoted string
	ld	c,HLCDQ		; find end of double-quoted string

hlpnext:			; advance to next part of buffer
	inc	hl
	inc	ix
	dec	b
	call	HLPEND		; until character found or buffer ends
	ld	(ix),HLSNO	; set normal state at the end
	jr	hlploop

hlpwo:				; is it a word?
	call	HLPLET		; a word consists of letters
	ld	a,c		; word length
	ld	de,HLCKW2	; there are keywords of length 2
	cp	2		; is the word of length 2?
	jr	z,hlpwoyes
	ld	de,HLCKW3	; there are keywords of length 3
	cp	3		; is the word of length 3?
	jr	z,hlpwoyes
	ld	de,HLCKW4	; there are keywords of length 4
	cp	4		; is the word of length 4?
	jr	z,hlpwoyes
; Keywords of other lengths can be added here...

hlpwono:			; no, the word cannot be a keyword
	inc	hl		; advance pointer to line buffer
	inc	ix		; advance pointer to highlighting states
	jr	hlploop

hlpwoyes:			; yes, the word might be a keyword
	push	bc		; \\\\\\\
	push	hl		; \\\\\\\\
	push	ix		; \\\\\\\\\
	ld	b,c		; word length
hlpworev:			; reverse until beginning of the word
	dec	hl
	dec	ix
	djnz	hlpworev
hlpkw:				; is the word a keyword?
	call	INKEY
	jr	z,hlpkend	; no, continue
	ld	(ix),HLSKW	; yes, mark beginning of keyword
hlpkend:
	pop	ix		; ///////// restore pointer to states
	pop	hl		; //////// restore pointer to line buffer
	pop	bc		; /////// restore number of remaining
	ld	(ix),HLSNO	; mark end of keyword
	jp	hlploop

hlpret:				; restore registers from stack and return
	pop	iy		; //////
	pop	ix		; /////
	pop	hl		; ////
	pop	de		; ///
	pop	bc		; //
	pop	af		; /
	ret


HLPEND:
; Advance pointers to line buffer and highlighting states until
; the character was found or the line segment ends.
; Input:
;	hl = current pointer to line segment
;	b = current remaining length of line segment
;	c = character
;	ix = current pointer to highlighting states
; Output:
;	hl = updated pointer to line segment
;	b = updated remaining length of line segment
;	ix = updated pointer to highlighting states
; Clobbers:
;	af
;
	ld	a,b
	or	a
	ret	z		; end of line segment
	ld	a,(hl)
	inc	hl
	inc	ix
	dec	b
	cp	c
	jr	nz,HLPEND	; character was not found, try again
	ret			; character was found

HLPLET:
; Advance pointers to line buffer and highlighting states while
; characters in the line buffer are letters.
; Input:
;	hl = current pointer to line segment
;	b = current remaining length of line segment
;	ix = current pointer to highlighting states
; Output:
;	hl = updated pointer to line segment
;	b = updated remaining length of line segment
;	ix = updated pointer to highlighting states
;	c = number of consequtive letters
; Clobbers:
;	af
;
	ld	c,0
hlple1:
	ld	a,b
	or	a
	ret	z		; end of line segment
	ld	a,(hl)
	cp	'A'
	ret	c		; not an uppercase letter
	or	20h
	cp	'{'
	ret	nc		; not a lowercase letter
	inc	hl
	inc	ix
	dec	b
	inc	c
	jr	hlple1		; repeat while letter


INKEY:
; Is string in keyword list?
; Input:
;	hl = pointer to string ending in whitespace (ASCII 0-32)
;	de = pointer to list of keywords separated by SPC and ending with NUL
; Output:
;	nz if string in keyword list, z if string not in keyword list
;	b = length of keyword if found, b = 0 if not found
; Clobbers:
;	af
;
	push	de		; \
	push	hl		; \\
inkloop:
	ld	bc,0		; length of keyword
	push	de		; \\\ save pointer to keyword list
inklength:
	ld	a,(de)		; character in keyword list
	or	a
	jr	z,inkmiss	; end of keyword list, so its a miss
	cp	' '
	jr	z,inkend	; end of keyword, so length is known
	inc	b		; increase length of keyword
	inc	de		; advance in keyword list
	jr	inklength
inkend:
	pop	de		; /// restore pointer to keyword list
	push	bc		; \\\ save length of keyword
	push	hl		; \\\\ save pointer to word
inktry:
	ld	a,(hl)		; character in word
	and	07fh		; to ascii
	or	HLCSKW		; keyword case sensitivity mask
	ld	c,a
	ld	a,(de)		; character in keyword
	cp	c
	jr	nz,inknomatch	; characters do not match, so try next keyword
	inc	hl		; advance to next character in word
	inc	de		; advance to next character in keyword
	djnz	inktry		; all characters must match
	ld	a,(hl)
	and	07fh
	cp	' '
	jr	nz,inknows	; last character must be a white-space
inkmatch:
	pop	hl		; //// adjust stack pointer
	pop	bc		; /// length of keyword
	jr	inkreturn
inknomatch:			; word is not same as keyword
	inc	de
	djnz	inknomatch	; advance to end of keyword
	inc	de		; advance to next keyword
inknows:
	pop	hl		; //// restore pointer to word
	pop	bc		; /// adjust stack pointer
	jr	inkloop		; try next keyword
inkmiss:
	pop	de		; /// adjust stack pointer
	ld	bc,0		; no match in keyword list

inkreturn:			; restore registers from stack and return
	pop	hl		; //
	pop	de		; /
	ld	a,b
	or	a
	ret


HLVIEW:
; View highlighting depending on highlighting states in HLSTA.
; Input:
;	ix = actual pointer to highlighting states
; Output:
;	Screen codes sent to screen.
; Clobbers:
;	af
;
	ld	a,(ix)
	cp	HLSNO		; normal?
	jp	z,TNORMAL	; yes, view normal
	cp	HLSCO		; comment?
	jp	z,TFAINT	; yes, view faint
	cp	HLSSQ		; single-quoted string?
	jp	z,TITALIC	; yes, view italic
	cp	HLSDQ		; double-quoted string?
	jp	z,TITALIC	; yes, view italic
	cp	HLSKW		; keyword?
	jp	z,TBOLD		; yes, view bold
	ret			; none of the above


HLSTAI:
; Initialize highlighting states in HLSTA
; Input:
;	None
; Output:
;	All highlighting states set to 'no change'
; Clobbers:
;	None
;
	push	bc		; \
	push	de		; \\
	push	hl		; \\\
	ld	hl,HLSTA
	ld	de,HLSTA+1
	ld	bc,MAXLEN
	ld	(hl),HLSNC
	ldir
	pop	hl		; ///
	pop	de		; //
	pop	bc		; /
	ret


endif

	end
